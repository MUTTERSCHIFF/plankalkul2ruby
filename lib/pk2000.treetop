grammar Pk2000

   rule program 
      "P" number randauszug "\n" lines "\nEND" <PKMethodNode>
      / lines
   end

   rule randauszug
      vTuple "=>" rTuple
   end

   rule vTuple
      ("(V0[:" type "])" 
      / "(V0[:" type "],V1[:" type "])" 
      / "(V0[:" type "],V1[:" type "],V2[:" type "])") {
	 def toRuby
	    # only need comma-delimited list of var-names
	    masgn = text_value.gsub(/\(|\)|\[[^V]*\]/, "").downcase.split(",")
            sexp = s(:args)
	    masgn.each { |arg| sexp << arg.to_sym }
	    sexp
	 end
      }
   end

   rule rTuple
      "R0[:" type "]" <PKVariableNode>
      / "(R0[:" type "])" <PKVariableNode>
      / "(R0[:" type "],R1[:" type "])" <PKVariableNode>
      / "(R0[:" type "],R1[:" type "],R2[:" type "])" <PKVariableNode>
   end

   rule lines
      first:statement rest:("\n" next:lines)? <PKLinesNode>
   end

   rule statement
      assignment / ifThen / while / block / builtIns / term2 / "(" statement ")" 
   end
   
   rule assignment
      (from:term2 "=>" to:variable / from:tuple "=>" to:variable / from:tuple "=>" to:varTuple) {
         def toRuby
            s(:call, to.toRuby, :<=, s(:arglist, from.toRuby))
         end
      }
   end

   rule ifThen
      term2 "->" statement {
         def toRuby
            s(:if, term2.toRuby, s(:block, statement.toRuby), nil)
         end
      }
      /
      term2 "->" block {
	 def toRuby
	    s(:if, term2.toRuby, block.toRuby, nil)
	 end
      }
   end

   rule while
      ("w" / "W") count:"1"? ("[" level:digits "]")? fixed:("(" forTo:operation ")")? "[" conditionalLines "]" <PKWhileNode>
   end

   rule conditionalLines
      first:ifThen rest:("\n" next:conditionalLines)? <PKLinesNode>
   end

   rule block
      "[" lines "]" {
         def toRuby
	    lines.toRuby
         end
      }
   end

   rule builtIns
      "FIN" number? <PKFinNode>
   end

   rule term2
      call / condition 
   end

   rule call
      "R" number:[0-9]+ "[" component? ":" type "])" argumentTuple <PKCallNode>
   end

   rule argumentTuple
      "(" first:term2 rest:(comma next:term2)* ")" <PKIterativeNode>
   end

   rule count
      "N(" variable ")" {
	 def toRuby
	    s(:call, variable.toRuby, :dimension, s(:arglist))
	 end
      }
   end

   rule prefix
      ("-" / "!" &([A-Z0-9] / "(" / genericVariable))
   end

   rule term
      genericVariable / variable / constant / count 
   end 

   rule prefixedTerm
      prefix term / term / "(" term2 ")" 
   end

   rule tuple
      varTuple
      /
      "(" first:term2 rest:(comma next:term2)+ ")" <PKIterativeNode>
   end

   rule varTuple
      "(" first:variable rest:(comma next:variable)+ ")" <PKIterativeNode>
   end

   rule condition
      prefixedTerm op:("=" / "<" / ">") condition <PKOperationNode>
      / tuple "=" tuple
      / operation
   end

   rule operation
      prefixedTerm op:("+" / "-" / "*" / "/" / "&" / "|" / "~") condition <PKOperationNode>
      / prefixedTerm 
   end

   rule constant
      "0" <PKNumberNode>
      / number / logConstant 
   end

   rule logConstant
      "+" logConstant* / "-" logConstant*
   end

   rule variable
      ("V" / "Z" / "R") [0-9]+ "[" component? ":" type "]" <PKVariableNode>
   end

   rule dot
      "." 
   end

   rule comma
      "," 
   end

   rule simpleType
      "0" <PKNumberNode>
   end

   rule type
      simpleType / tupleType / number dot type
   end

   rule tupleType
      "(" first:type rest:(comma next:type)+ ")" <PKIterativeNode>
   end

   rule component
      [0-9]+ dot component / term2 / [0-9]+ / variable / genericVariable
   end

   rule genericVariable
      "i" number <PKGenericVariableNode>
      / "i" <PKGenericVariableNode>
   end

   rule number
      [1-9] digits <PKNumberNode>
   end

   rule digits
      [0-9]* <PKNumberNode>
   end
end
